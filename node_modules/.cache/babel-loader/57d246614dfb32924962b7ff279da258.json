{"ast":null,"code":"var _jsxFileName = \"/Users/sjl/Documents/GitHub/RankedPairs-site/src/Ballot.js\";\nimport React from 'react';\nimport { Typography, Button } from '@material-ui/core';\nimport Position from './Position.js'; // passed into this is the ballotRep, which stores the list of positions, \n// the list of candidates for each position, and the ballot name. If we want\n// to html send the results from this component, we also need the voter ID. \n// We should do that all in one AWS lambda call. \n// \n\nexport default class Ballot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      preferences: {}\n    };\n    this.boundHandler = this.handler.bind(this);\n  } // This updates the state with preferences, nothing is submitted until \n  // the submit button is pressed\n\n\n  handler(pref, candidate, position) {\n    console.log([pref, candidate, position, this.props.ballotRep.name]);\n    this.setState({\n      preferences: {\n        position: {\n          candidate: pref\n        }\n      }\n    });\n  }\n\n  submit() {// make an html request to submit\n  }\n\n  // position in this case is an object with name and candidates \t\n  positionRepToPosition(positionRep) {\n    return /*#__PURE__*/React.createElement(Position, {\n      position: positionRep.name,\n      candidates: positionRep.candidates,\n      handler: this.boundHandlerwe //handler={(pr, c, po) => this.handler(pr, c, po)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 4\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Ballot\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h1\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, this.props.ballotRep.name), this.props.ballotRep.positionReps.map(this.positionRepToPosition), /*#__PURE__*/React.createElement(Button, {\n      className: \"Ballot-submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/sjl/Documents/GitHub/RankedPairs-site/src/Ballot.js"],"names":["React","Typography","Button","Position","Ballot","Component","constructor","props","state","preferences","boundHandler","handler","bind","pref","candidate","position","console","log","ballotRep","name","setState","submit","positionRepToPosition","positionRep","candidates","boundHandlerwe","render","positionReps","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,MAArB,QAAmC,mBAAnC;AACA,OAAOC,QAAP,MAAqB,eAArB,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,MAAN,SAAqBJ,KAAK,CAACK,SAA3B,CAAqC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,WAAW,EAAE;AADD,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAApB;AACA,GAPkD,CAQnD;AACA;;;AACAD,EAAAA,OAAO,CAAEE,IAAF,EAAQC,SAAR,EAAmBC,QAAnB,EAA6B;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACJ,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4B,KAAKR,KAAL,CAAWW,SAAX,CAAqBC,IAAjD,CAAZ;AACA,SAAKC,QAAL,CAAc;AAACX,MAAAA,WAAW,EAAE;AAACM,QAAAA,QAAQ,EAAE;AAACD,UAAAA,SAAS,EAAED;AAAZ;AAAX;AAAd,KAAd;AACA;;AAEDQ,EAAAA,MAAM,GAAG,CACR;AACA;;AAED;AACAC,EAAAA,qBAAqB,CAAEC,WAAF,EAAe;AACnC,wBACC,oBAAC,QAAD;AACC,MAAA,QAAQ,EAAEA,WAAW,CAACJ,IADvB;AAEC,MAAA,UAAU,EAAEI,WAAW,CAACC,UAFzB;AAGC,MAAA,OAAO,EAAE,KAAKC,cAHf,CAIC;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAQA;;AAEDC,EAAAA,MAAM,GAAG;AACR,wBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,YAAY,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKnB,KAAL,CAAWW,SAAX,CAAqBC,IADtB,CADD,EAIE,KAAKZ,KAAL,CAAWW,SAAX,CAAqBS,YAArB,CAAkCC,GAAlC,CAAsC,KAAKN,qBAA3C,CAJF,eAKC,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,CADD;AAUA;;AA1CkD","sourcesContent":["import React from 'react'; \nimport { Typography, Button } from '@material-ui/core';\nimport Position from './Position.js';\n\n// passed into this is the ballotRep, which stores the list of positions, \n// the list of candidates for each position, and the ballot name. If we want\n// to html send the results from this component, we also need the voter ID. \n// We should do that all in one AWS lambda call. \n// \nexport default class Ballot extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tpreferences: {}\n\t\t};\n\t\tthis.boundHandler = this.handler.bind(this);\n\t}\n\t// This updates the state with preferences, nothing is submitted until \n\t// the submit button is pressed\n\thandler (pref, candidate, position) {\n\t\tconsole.log([pref, candidate, position, this.props.ballotRep.name]);\n\t\tthis.setState({preferences: {position: {candidate: pref}}});\n\t}\n\n\tsubmit (){\n\t\t// make an html request to submit\n\t};\n\n\t// position in this case is an object with name and candidates \t\n\tpositionRepToPosition (positionRep) {\n\t\treturn (\n\t\t\t<Position\n\t\t\t\tposition={positionRep.name}\n\t\t\t\tcandidates={positionRep.candidates}\n\t\t\t\thandler={this.boundHandlerwe}\n\t\t\t\t//handler={(pr, c, po) => this.handler(pr, c, po)}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Ballot\">\n\t\t\t\t<Typography variant='h1' gutterBottom>\n\t\t\t\t{this.props.ballotRep.name}\n\t\t\t\t</Typography>\n\t\t\t\t{this.props.ballotRep.positionReps.map(this.positionRepToPosition)}\n\t\t\t\t<Button className=\"Ballot-submit\" />\n\t\t\t</div>\n\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}